# Arduino AVR Core and platform.
# ------------------------------

# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=HoRoSim
version=0.0.1

# AVR compile variables
# ---------------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

# Default "compiler.path" is correct, change only if you want to overidde the initial value
#compiler.path=
compiler.path=
compiler.c.cmd=g++
compiler.c.cmd.Windows=cmd /C g++

compiler.c.flags=-c -g -Os {compiler.warning_flags} -ffunction-sections -fdata-sections -MMD 
compiler.c.elf.flags={compiler.warning_flags} -Os 
compiler.c.elf.cmd=g++
compiler.S.flags=-c -g -x assembler-with-cpp

compiler.cpp.cmd=g++ 
compiler.cpp.flags=-std=c++11 -c -g -Os {compiler.warning_flags} -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD 

compiler.ar.cmd=ar
compiler.ar.cmd.windows=ar.exe
compiler.ar.flags= rvs

compiler.objcopy.cmd=g++

#Show the compiler version for debugging installation problems
recipe.hooks.sketch.prebuild.1.pattern=echo Compiling for HoRoSim
recipe.hooks.sketch.prebuild.1.pattern.windows=cmd /C echo Compiling for HoRoSim
recipe.hooks.sketch.prebuild.2.pattern={compiler.path}{compiler.c.cmd} --version
recipe.hooks.sketch.prebuild.3.pattern=pwd
recipe.hooks.sketch.prebuild.3.pattern.windows=cmd /C cd
#recipe.hooks.linking.postlink.1.pattern={build.path}/{build.project_name}

compiler.objcopy.eep.flags=
#compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.elf2hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd=avr-objcopy
compiler.ldflags=
compiler.size.cmd=avr-size

# This can be overridden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=-lGL -lGLU -lglut
compiler.c.elf.extra_flags.macosx=-framework OpenGL -framework GLUT
compiler.c.elf.extra_flags.windows=-lfreeglut -lopengl32 -lglut32 -Wl,--subsystem,windows -lwinmm -lws2_32
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags= 

# AVR compile patterns
# --------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {compiler.c.extra_flags} -D NON_MATLAB_PARSING -D MAX_EXT_API_CONNECTIONS=255 -D DO_NOT_USE_SHARED_MEMORY {build.extra_flags} {includes} "{source_file}" -o "{object_file}"
recipe.c.o.pattern.windows="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} {compiler.c.extra_flags} -D NON_MATLAB_PARSING -D MAX_EXT_API_CONNECTIONS=255 -D DO_NOT_USE_SHARED_MEMORY {build.extra_flags} {includes} -I{runtime.hardware.path}\redist\freeglut\include\ "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {compiler.cpp.extra_flags} -D NON_MATLAB_PARSING -D MAX_EXT_API_CONNECTIONS=255 -D DO_NOT_USE_SHARED_MEMORY  {build.extra_flags} {includes} "{source_file}" -o "{object_file}" 
recipe.cpp.o.pattern.windows="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {compiler.cpp.extra_flags} -D NON_MATLAB_PARSING -D MAX_EXT_API_CONNECTIONS=255 -D DO_NOT_USE_SHARED_MEMORY  {build.extra_flags} {includes} -I{runtime.hardware.path}\redist\freeglut\include\ "{source_file}" -o "{object_file}" 


## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"
recipe.S.o.pattern.windows="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} {compiler.S.extra_flags} {build.extra_flags} {includes} -I{runtime.hardware.path}\redist\freeglut\include\ "{source_file}" -o "{object_file}"

## Create archives (We need to keep {build.path}/{archive_file} to keep backwards compatibility)
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"


## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -o "{build.path}/{build.project_name}" {object_files} "{build.path}/{archive_file}" "-L{build.path}" -lm -lpthread -L/usr/lib/x86_64-linux-gnu {compiler.c.elf.extra_flags}
recipe.c.combine.pattern.windows="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -o "{build.path}/{build.project_name}" {object_files} "{build.path}/{archive_file}" "-L{build.path}" -L{runtime.hardware.path}\redist\freeglut\lib -lm -lpthread -L/usr/lib/x86_64-linux-gnu {compiler.c.elf.extra_flags}

#recipe.objcopy.hex.pattern= {build.path}/{build.project_name}

## Save compiled hex
recipe.output.tmp_file={build.project_name}
recipe.output.save_file={build.project_name}.exe


## Preprocessor
preproc.includes.flags=-w -x c++ -M -MG -MP
recipe.preproc.includes={compiler.path} {compiler.cpp.cmd} g++ {compiler.cpp.flags} {preproc.includes.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}"

# The following line provides Arduino IDE 1.6.6 compatibility with the Arduino IDE 1.6.7 version of recipe.preproc.macros used here
preprocessed_file_path={build.path}/nul
preproc.macros.flags=-w -x c++ -E -CC
recipe.preproc.macros={compiler.path} {compiler.cpp.cmd} {compiler.cpp.flags} {preproc.macros.flags} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{preprocessed_file_path}"


# AVR Uploader/Programmers tools
# ------------------------------

tools.avrdude.path={build.path}/{build.project_name}
tools.avrdude.cmd.path={build.path}/{build.project_name}
tools.avrdude.config.path={runtime.platform.path}/avrdude.conf

tools.avrdude.upload.params.verbose=-v
tools.avrdude.upload.params.quiet=-q -q
# tools.avrdude.upload.verify is needed for backwards compatibility with AVRDUDE 6.3.0 and IDE 1.6.8 or older, IDE 1.6.9 or newer overrides this value
tools.avrdude.upload.verify=
tools.avrdude.upload.params.noverify=-V
tools.avrdude.upload.pattern={build.path}/{build.project_name}
#"-C{config.path}" {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D "-Uflash:w:{build.path}/{build.project_name}.hex:i"

tools.avrdude.program.params.verbose=-v
tools.avrdude.program.params.quiet=-q -q
# tools.avrdude.program.verify is needed for backwards compatibility with AVRDUDE 6.3.0 and IDE 1.6.8 or older, IDE 1.6.9 or newer overrides this value
tools.avrdude.program.verify=
tools.avrdude.program.params.noverify=-V
tools.avrdude.program.pattern={build.path}/{build.project_name} 
#"-C{config.path}" -v {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} "-Uflash:w:{build.path}/{build.project_name}.hex:i"

tools.avrdude.erase.params.verbose=-v
tools.avrdude.erase.params.quiet=-q -q
tools.avrdude.erase.pattern={build.path}/{build.project_name} 
#"-C{config.path}" -v -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m

tools.avrdude.bootloader.params.verbose=-v
tools.avrdude.bootloader.params.quiet=-q -q
tools.avrdude.bootloader.pattern={build.path}/{build.project_name}
#"-C{config.path}" {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} "-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i" -Ulock:w:{bootloader.lock_bits}:m


# USB Default Flags
# Default blank usb manufacturer will be filled it at compile time
# - from numeric vendor ID, set to Unknown otherwise
build.usb_manufacturer="Unknown"
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'

